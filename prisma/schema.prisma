// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Lesson {
  id        String   @id @default(uuid())
  attempted Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  title     String
  questions Json     // Array of LessonQuestion objects
  mistakes  Mistakes[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mistakes{
  id        String   @id @default(uuid())
  lessonId  String   
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  questions Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  createdAt      DateTime        @default(now())
  userResponses  UserResponse[]
  preferences    Json
  progresses     Progress[]
  lessons        Lesson[]        // Relation: one user can have many lessons
}

model Scene {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  language    String        // New: target language for this scene
  createdAt   DateTime      @default(now())
  scriptLines ScriptLine[]
}

model ScriptLine {
  id            Int           @id @default(autoincrement())
  sceneId       Int
  order         Int
  speaker       String
  text          String
  answer        String?
  audioUrl      String?       // New field to store audio URL
  scene         Scene         @relation(fields: [sceneId], references: [id])
  userResponses UserResponse[]
}

model UserResponse {
  id           Int           @id @default(autoincrement())
  userId       Int
  scriptLineId Int
  response     String
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  scriptLine   ScriptLine    @relation(fields: [scriptLineId], references: [id])
}

model Tutorial {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  language    String    // New: target language for this tutorial
  createdAt   DateTime  @default(now())
  progresses  Progress[]
}

model Progress {
  id           Int       @id @default(autoincrement())
  userId       Int
  tutorialId   Int
  completed    Boolean   @default(false)
  completedAt  DateTime?
  user         User      @relation(fields: [userId], references: [id])
  tutorial     Tutorial  @relation(fields: [tutorialId], references: [id])
}
